/*!

\page developer Developer Guidelines
We very much welcome external developers. Small changes and contributions can be made via pull requests.
If you have a larger enhancement, bug fix or other contribution in mind, feel free to first create an issue 
to align the development with ongoing activities.

\section Code Formatting
We support clang-format and provide a style template to automatically format the code. Please refer to the
style sheet for our conventions. Or simply rely on clang-format to do the formatting for you ;).

\section Explicit Template Instantiation
CT relies on explicit template instantiation. While CT handles things slightly different, please see
[this post](https://anteru.net/blog/2008/11/19/318/index.html) to learn more about the subject. The
basic idea is that for all templated class there is 
- a header (.h) that defines the class and its methods
- an (header) implementation (-impl.h) that implements all methods
- a cpp template file (.cpp.in) that instantiates the template

The template file has the following placeholders

Placeholder 		| Description
--------------		| -------------
STATE_DIM_PRESPEC	| The state dimension
CONTROL_DIM_PRESPEC | The control dimension
SCALAR_PRESPEC		| The scalar type
DOUBLE_OR_FLOAT		| "true" if the scalar type is double or float
POS_DIM_PRESPEC		| Position dimension for symplectic integrator (default: 0)
VEL_DIM_PRESPEC		| Velocity dimension for symplectic integrator (default: 0)

You can use these placeholders in the code
\code{.cpp}
   #if \@DOUBLE_OR_FLOAT\@
   template class ct::coreMyClass<\@STATE_DIM_PRESPEC\@, \@CONTROL_DIM_PRESPEC\@>;
   #endif
\endcode
   
The parser in the CMakeLists.txt would then create the following code out of this
(for STATE_DIM=3, CONTROL_DIM=2, SCALAR=double)

\code{.cpp}
   #if 1
   template class ct::coreMyClass<3, 2>;
   #endif
\endcode
   
\note The parameter DOUBLE_OR_FLOAT is optional but can be used if your class does not compile for Auto-Diff types
which is often the case if no special care is taken.

*/