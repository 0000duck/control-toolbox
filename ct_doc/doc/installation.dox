/*!

\page install_guide Installation
@tableofcontents

\section req Requirements:

- Ubuntu 16.04 or 18.04
- a compiler with C++14 support, e.g. gcc or clang


\section dep Dependencies and building the library
 - install ROS, please follow the steps in <a href="http://wiki.ros.org/Installation/Ubuntu"> this tutorial</a> for your Linux distribution.
 - install <a href="http://eigen.tuxfamily.org/index.php?title=Main_Page">Eigen 3</a> via
  \code{.sh} 
  sudo apt-get update 
  sudo apt-get install libeigen3-dev 
  \endcode
 - install the <a href="http://catkin-tools.readthedocs.io/en/latest/verbs/catkin_build.html">catkin_tools</a> build system
 \code{.sh}
 sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu `lsb_release -sc` main" > /etc/apt/sources.list.d/ros-latest.list'
 wget http://packages.ros.org/ros.key -O - | sudo apt-key add -
 sudo apt-get update
 sudo apt-get install python-catkin-tools
 \endcode
 - install boost
 \code{.sh}
 sudo apt-get install libboost-all-dev
 \endcode
 - create a catkin workspace and initialize it
 \code{.sh}
 mkdir -p ~/catkin_ws/src
 cd ~/catkin_ws
 catkin init
 \endcode

 - install the <a href="https://github.com/ethz-asl/kindr">kindr</a> library
  \code{.sh}
  cd ~/catkin_ws/src
  git clone https://github.com/ANYbotics/kindr.git
  \endcode

 - finally, clone the control toolbox and build your workspace
  \code{.sh}
  cd ~/catkin_ws/src
  git clone https://github.com/ethz-adrl/control-toolbox.git
  catkin build -DCMAKE_BUILD_TYPE=Release
  \endcode

 - if you would like to run an example, build the library with 
  \code{.sh}
  cd ~/catkin_ws/src
  catkin build -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=true
  \endcode
  Now, try to run the examples, e.g. the optimal control and optimal filtering examples:
   \code{.sh}
  cd ~/catkin_ws/src
  catkin build -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=true
  rosrun ct_optcon ex_NLOC
  rosrun ct_optcon ex_KalmanFiltering
  \endcode


\section opt_dep Optional Dependencies and Bindings
The following dependencies and bindings are optional but can help to enhance the functionality or performance of the CT

 - <a href="http://www.netlib.org/lapack/">lapack</a> (enables Schur method as an alternative to iterative method in ct::optcon::LQR)
 \code{.sh} $ sudo apt-get install liblapack-dev \endcode

 - <a href="https://clang.llvm.org/">clang</a> compiler (faster compilation for large linear models), install from command-line via
 \code{.sh} $ sudo apt-get install clang \endcode
 and possibly replace `clang` with a more specific version, e.g. `clang-3.8`.
 Please make sure that the `clang` and `clang++` commands are in your path.
 You may need to create a symbolic link in `/usr/bin` or use a bash alias.

 - <a href="https://projects.coin-or.org/Ipopt">IPOPT</a> or <a href="http://www.sbsi-sol-optimize.com/asp/sol_product_snopt.htm">SNOPT</a>
  (for ct::optcon::SnoptSolver and ct::optcon::IpoptSolver as used by ct::optcon::DMS)

 - <a href="https://github.com/giaf/blasfeo/tree/ct-v2">blasfeo</a> linear algebra and <a href=https://github.com/giaf/hpipm/tree/ct-v2">HPIPM solver</a> as
 alternative high-performance (constrained) linear-quadratic optimal control solver. Check out the *ct-v2* tags. Detailed reference
 about blasefeo can be found <a href="https://arxiv.org/abs/1704.02457">here</a>.
 Both packages were developed by <a href="https://www.syscop.de/people/dr-gianluca-frison">Gianluca Frison</a>, <a href="https://www.syscop.de/">University of Freiburg</a>.

 - <a href="http://qwt.sourceforge.net/">Qwt</a> (for basic plotting)

 - MATLAB (for Matlab logging)

 - <a href="http://clang.llvm.org/extra/clang-tidy/">clang-tidy</a>, install via
 \code{.sh}
 $ sudo apt-get install clang-tidy-3.9
 \endcode

 - <a href="https://clang.llvm.org/docs/ClangFormat.html">clang-format</a>, install via
  \code{.sh}
 $ sudo apt-get install clang-format-3.9
 \endcode



\section Additional build arguments
The following additional build flags are available, which can be appended to the build command above

Build Flag  | Default value | Description
------------- | ------------- | ------------
-DBUILD_EXAMPLES=\<BOOL> | FALSE  | Builds examples for all packages
-DBUILD_HYQ_FULL=\<FALSE> | FALSE | Build HyQ examples and executables (warning: slow with GCC!)
-DUSE_CLANG=\<BOOL> | FALSE  | Use CLANG instead of the default compiler
-DCLANG_CXX_COMPILER=\<clang-bin> | "/usr/bin/clang++" | Set clang C++ compiler binary
-DCLANG_C_COMPILER=\<clang-bin> | "/usr/bin/clang" | Set clang C compiler binary
-DUSE_INTEL=\<BOOL> | FALSE  | Use Intel compiler instead of the default compiler
-DINTEL_CXX_COMPILER=\<clang-bin> | "/opt/intel/bin/icc" | Set Intel C++ compiler binary
-DINTEL_C_COMPILER=\<clang-bin> | "/opt/intel/bin/icpc" | Set Intel C compiler binary
-DHPIPM=\<BOOL> | FALSE | Compile with HPIPM support (set $BLASFEO_DIR and $HPIPM_DIR environment variables)



\section build_doc Build this Documentation
To build the documentation do
\code{.sh}
catkin build ct_doc -v --make-args doc # build the doc
\endcode
This will build the documentation. The index.html can be found in ct_doc.


\section run_tests Run Unit Tests
The unit tests are writte as <a href="http://code.google.com/p/googletest/">Google Tests</a>.
To run unit tests and verify operation execute
\code{.sh}
catkin run_tests
\endcode

*/
